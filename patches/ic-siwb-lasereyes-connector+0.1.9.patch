diff --git a/node_modules/ic-siwb-lasereyes-connector/dist/index.js b/node_modules/ic-siwb-lasereyes-connector/dist/index.js
index bf707a1..3858ba4 100644
--- a/node_modules/ic-siwb-lasereyes-connector/dist/index.js
+++ b/node_modules/ic-siwb-lasereyes-connector/dist/index.js
@@ -131280,6 +131280,7 @@ async function callLogin(anonymousActor, data, address, publickeyHex, sessionPub
     throw new Error("Invalid actor, data , address or signMessageType");
   }
   const loginReponse = await anonymousActor.siwb_login(data, address, publickeyHex, new Uint8Array(sessionPublicKey), signMessageType);
+  console.log("ðŸš€ ~ callLogin ~ loginReponse:", loginReponse)
   if ("Err" in loginReponse) {
     throw new Error(loginReponse.Err);
   }
@@ -131586,7 +131587,7 @@ function SiwbIdentityProvider({
       selectedProvider: providerType ?? p,
       provider,
       network,
-      connectedBtcAddress: address ? address[0] : "",
+      connectedBtcAddress: address ? (providerType === "phantom" ? (address[0])?.address : address[0]) : "",
       connectedBtcPublicKey: publicKey
     });
   }
@@ -131652,6 +131653,7 @@ function SiwbIdentityProvider({
     }
     let loginOkResponse;
     try {
+      console.log(state.anonymousActor, loginSignature, state.connectedBtcAddress, publickeyHex, sessionPublicKey, signMessageType);
       loginOkResponse = await callLogin(
         state.anonymousActor,
         loginSignature,
@@ -131660,6 +131662,7 @@ function SiwbIdentityProvider({
         sessionPublicKey,
         signMessageType
       );
+    
     } catch (e) {
       rejectLoginWithError(e, "Unable to login.");
       return;
